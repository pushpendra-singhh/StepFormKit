{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;;;;;;AAEmE;AACM;AACA;;;;;AAgElE,MAAM,YAAY;IA9DzB;QA+DE,eAAU,GAAe,4EAAe,CAAC;QACzC,gBAAW,GAAW,OAAO,CAAC;QAGtB,kBAAa,GAAG;YACtB,YAAY,EAAE;gBACZ,SAAS,EAAE,YAAY;gBACvB,QAAQ,EAAE,OAAO;gBACjB,KAAK,EAAE,wBAAwB;aAChC;SACF,CAAC;QAEM,qBAAgB,GAAG;YACzB,YAAY,EAAE;gBACZ,SAAS,EAAE,YAAY;gBACvB,QAAQ,EAAE,OAAO;gBACjB,KAAK,EAAE,wBAAwB;gBAC/B,KAAK,EAAE,cAAc;gBACrB,SAAS,EAAE,YAAY;aACxB;YACD,WAAW,EAAE;gBACX,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,SAAS;gBACf,KAAK,EAAE,IAAI;gBACX,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,IAAI;aACd;YACD,WAAW,EAAE;gBACX,UAAU,EAAE,IAAI;gBAChB,KAAK,EAAE,OAAO;gBACd,QAAQ,EAAE,IAAI;aACf;SACF,CAAC;QAEM,qBAAgB,GAAG;YACzB,YAAY,EAAE;gBACZ,SAAS,EAAE,YAAY;gBACvB,QAAQ,EAAE,OAAO;gBACjB,UAAU,EAAE,QAAQ;gBACpB,KAAK,EAAE,gCAAgC;aACxC;YACD,mBAAmB,EAAE;gBACnB,cAAc,EAAE,QAAQ;gBACxB,eAAe,EAAE,UAAU;gBAC3B,cAAc,EAAE,YAAY;aAC7B;YACD,cAAc,EAAE;gBACd,WAAW,EAAE,iBAAiB;gBAC9B,cAAc,EAAE,CAAC,OAAO,EAAE,KAAK,CAAC;gBAChC,iBAAiB,EAAE,CAAC;aACrB;SACF,CAAC;KAkBH;IAhBC,aAAa,CAAC,QAAgB;QAC5B,IAAI,CAAC,WAAW,GAAG,QAAQ,CAAC;QAC5B,QAAQ,QAAQ,EAAE;YAChB,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,kFAAkB,CAAC;gBACrC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC7C,MAAM;YACR,KAAK,UAAU;gBACb,IAAI,CAAC,UAAU,GAAG,kFAAkB,CAAC;gBACrC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,gBAAgB,CAAC;gBAC7C,MAAM;YACR;gBACE,IAAI,CAAC,UAAU,GAAG,4EAAe,CAAC;gBAClC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,aAAa,CAAC;SAC7C;IACH,CAAC;6EArEU,YAAY;+GAAZ,YAAY;YA3DrB,yEAAuB;YACjB,2EAAgB;YAAA,4DAAK;YACzB,sEAAK;YAEP,oIAAS,kBAAc,OAAO,CAAC,IAAC;YAGhC,uEACF;YAAA,4DAAS;YACT,4EAGwE;YAFtE,oIAAS,kBAAc,UAAU,CAAC,IAAC;YAGnC,0EACF;YAAA,4DAAS;YACT,4EAGwE;YAFtE,oIAAS,kBAAc,UAAU,CAAC,IAAC;YAGnC,0EACF;YAAA,4DAAS;YAEL,+EAAyF;YAC3F,4DAAM;;YAlBN,0DAAwC;YAAxC,gGAAwC;YACxC,4LAAkE;YAKlE,0DAA2C;YAA3C,mGAA2C;YAC3C,+LAAqE;YAKrE,0DAA2C;YAA3C,mGAA2C;YAC3C,+LAAqE;YAIpD,0DAAyB;YAAzB,sFAAyB;;;;;;;;;;;;;;;;;;;;;;;AC9BY;AACqB;AAChC;AAC0B;AACpB;;AAa9C,MAAM,SAAS;0EAAT,SAAS;8GAAT,SAAS,cAFR,wDAAY;kHANtB,oEAAa;YACb,yFAAuB;YACvB,+DAAmB;YACnB,kFAAiB;;mIAKR,SAAS,mBAVL,wDAAY,aAEzB,oEAAa;QACb,yFAAuB;QACvB,+DAAmB;QACnB,kFAAiB;;;;;;;;;;;;;;;ACXd,MAAM,kBAAkB,GAAe;IAC5C,EAAE,EAAE,cAAc;IAClB,KAAK,EAAE,4BAA4B;IACnC,KAAK,EAAE;QACL;YACE,EAAE,EAAE,cAAc;YAClB,KAAK,EAAE,sBAAsB;YAC7B,WAAW,EAAE,oDAAoD;YACjE,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,wBAAwB,EAAE;gBAChH,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,uBAAuB,EAAE;gBAC7G,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,yBAAyB,EAAE;gBACzG,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,sBAAsB,EAAE;gBAC7G,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,2BAA2B,EAAE;aACvH;SACF;QACD;YACE,EAAE,EAAE,aAAa;YACjB,KAAK,EAAE,qBAAqB;YAC5B,WAAW,EAAE,sCAAsC;YACnD,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,4BAA4B,EAAE;gBACrH,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,kBAAkB,EAAE;gBAC/F,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,4BAA4B,EAAE;gBACpH,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,iBAAiB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,6BAA6B,EAAE;gBACxH,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,qBAAqB,EAAE,OAAO,EAAE;wBACjH,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,eAAe,EAAE;wBACvC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;wBAChC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,gBAAgB,EAAE;wBACxC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,WAAW,EAAE;qBACpC,EAAC;aACH;SACF;QACD;YACE,EAAE,EAAE,aAAa;YACjB,KAAK,EAAE,kBAAkB;YACzB,WAAW,EAAE,+BAA+B;YAC5C,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,yBAAyB,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE;gBAC7G,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,iBAAiB,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,uBAAuB,EAAE,OAAO,EAAE;wBACxH,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE;wBAClC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;wBAChC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,gBAAgB,EAAE;qBAC7C,EAAC;gBACF,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,oBAAoB,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,0BAA0B,EAAE,OAAO,EAAE;wBAClI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE;wBACjC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE;wBACjC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;wBAChC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;qBACjC,EAAC;aACH;SACF;KACF;IACD,gBAAgB,EAAE,uBAAuB;IACzC,gBAAgB,EAAE,QAAQ;CAC3B,CAAC;;;;;;;;;;;;;;;ACvDK,MAAM,eAAe,GAAe;IACzC,EAAE,EAAE,WAAW;IACf,KAAK,EAAE,wBAAwB;IAC/B,KAAK,EAAE;QACL;YACE,EAAE,EAAE,cAAc;YAClB,KAAK,EAAE,sBAAsB;YAC7B,WAAW,EAAE,iDAAiD;YAC9D,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,wBAAwB,EAAE;gBAChH,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,uBAAuB,EAAE;gBAC7G,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,yBAAyB,EAAE;aAC1G;SACF;KACF;IACD,gBAAgB,EAAE,mBAAmB;IACrC,gBAAgB,EAAE,QAAQ;CAC3B,CAAC;;;;;;;;;;;;;;;ACjBK,MAAM,kBAAkB,GAAe;IAC5C,EAAE,EAAE,cAAc;IAClB,KAAK,EAAE,qCAAqC;IAC5C,KAAK,EAAE;QACL;YACE,EAAE,EAAE,cAAc;YAClB,KAAK,EAAE,sBAAsB;YAC7B,WAAW,EAAE,iDAAiD;YAC9D,MAAM,EAAE;gBACN,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,wBAAwB,EAAE;gBAChH,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,uBAAuB,EAAE;gBAC7G,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,yBAAyB,EAAE;gBACnH,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,8BAA8B,EAAE;aACpH;SACF;QACD;YACE,EAAE,EAAE,qBAAqB;YACzB,KAAK,EAAE,sBAAsB;YAC7B,WAAW,EAAE,8CAA8C;YAC3D,MAAM,EAAE;gBACN;oBACE,IAAI,EAAE,gBAAgB;oBACtB,KAAK,EAAE,0BAA0B;oBACjC,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,sCAAsC;oBACpD,OAAO,EAAE;wBACP,EAAE,KAAK,EAAE,cAAc,EAAE,KAAK,EAAE,cAAc,EAAE;wBAChD,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;wBACpC,EAAE,KAAK,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE;wBAC3C,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE;qBACpC;iBACF;gBACD,EAAE,IAAI,EAAE,iBAAiB,EAAE,KAAK,EAAE,kBAAkB,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,8BAA8B,EAAE;gBAClI,EAAE,IAAI,EAAE,gBAAgB,EAAE,KAAK,EAAE,2BAA2B,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,6BAA6B,EAAE;aAC1I;SACF;QACD;YACE,EAAE,EAAE,gBAAgB;YACpB,KAAK,EAAE,yBAAyB;YAChC,WAAW,EAAE,yDAAyD;YACtE,MAAM,EAAE;gBACN;oBACE,IAAI,EAAE,aAAa;oBACnB,KAAK,EAAE,uBAAuB;oBAC9B,IAAI,EAAE,QAAQ;oBACd,QAAQ,EAAE,IAAI;oBACd,YAAY,EAAE,mCAAmC;oBACjD,OAAO,EAAE;wBACP,EAAE,KAAK,EAAE,gBAAgB,EAAE,KAAK,EAAE,yBAAyB,EAAE;wBAC7D,EAAE,KAAK,EAAE,iBAAiB,EAAE,KAAK,EAAE,6BAA6B,EAAE;wBAClE,EAAE,KAAK,EAAE,kBAAkB,EAAE,KAAK,EAAE,2BAA2B,EAAE;wBACjE,EAAE,KAAK,EAAE,eAAe,EAAE,KAAK,EAAE,wBAAwB,EAAE;wBAC3D,EAAE,KAAK,EAAE,mBAAmB,EAAE,KAAK,EAAE,oBAAoB,EAAE;qBAC5D;iBACF;gBACD;oBACE,IAAI,EAAE,gBAAgB;oBACtB,KAAK,EAAE,yBAAyB;oBAChC,IAAI,EAAE,UAAU;oBAChB,QAAQ,EAAE,KAAK;oBACf,YAAY,EAAE,EAAE;oBAChB,OAAO,EAAE;wBACP,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE;wBAClC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;wBAChC,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE;wBAC9B,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,mBAAmB,EAAE;wBAChD,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;qBACjC;iBACF;gBACD,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,8BAA8B,EAAE,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,iCAAiC,EAAE;aACtJ;SACF;KACF;IACD,gBAAgB,EAAE,uCAAuC;IACzD,gBAAgB,EAAE,QAAQ;CAC3B,CAAC;;;;;;;;;;;;;;;;;;;;;;;AC9EsH;AACpD;AAIzB;AACZ;AAC2C;;;;;;;;ICEtE,0EAIkE;IAChE,uDACF;IAAA,4DAAM;;;;;IAJD,sGAAuC;IAEvC,4HAA4D;IAC/D,0DACF;IADE,yFACF;;;IAiBY,uEAQuD;;;;;;;IAPhD,gFAAmB;IAInB,sHAAqD;;;IAK5D,uEAQuD;;;;;;;IANhD,8EAAiB;IAGjB,sHAAqD;;;IAK5D,uEAQuD;;;;;;;IANhD,8EAAiB;IAGjB,sHAAqD;;;IAa1D,6EAAoE;IAAA,uDAAkB;IAAA,4DAAS;;;IAAlD,mFAAsB;IAAC,0DAAkB;IAAlB,iFAAkB;;;IARxF,6EAMwD;IACrC,2EAAgB;IAAA,4DAAS;IAC1C,8KAA+F;IACjG,4DAAS;;;;;;;IARD,8EAAiB;IAGjB,sHAAqD;IAIhC,0DAAgB;IAAhB,sFAAgB;;;IAG7C,0EAAuD;IACrD,uEAMuD;IACvD,4EAA0B;IAAA,uDAAiB;IAAA,4DAAQ;;;;;;;IAN5C,0DAAiB;IAAjB,8EAAiB;IAGjB,sHAAqD;IAGrD,0DAAkB;IAAlB,+EAAkB;IAAC,0DAAiB;IAAjB,gFAAiB;;;IAMzC,0EAA+D;IAC7D,uEAOuD;IACvD,4EAA+C;IAAA,uDAAkB;IAAA,4DAAQ;;;;;;;;IAPlE,0DAAsC;IAAtC,uGAAsC;IAItC,sHAAqD;IAGrD,0DAAuC;IAAvC,wGAAuC;IAAC,0DAAkB;IAAlB,iFAAkB;;;IAZvE,0EAAiD;IAErC,uDAAiB;IAAA,4DAAS;IAClC,qKAUM;IACR,4DAAW;;;IAZD,0DAAiB;IAAjB,gFAAiB;IACD,0DAAgB;IAAhB,sFAAgB;;;IAc5C,uEAOuD;;;;;;;IALhD,8EAAiB;IAGjB,sHAAqD;;;IAK1D,mEAA+G;;;IADjH,wEAAuC;IACrC,iMAA+G;IACjH,qEAAe;;;;;IADE,0DAA0C;IAA1C,wGAA0C;;;IAI7D,0EAGkB;IAChB,uDACF;IAAA,4DAAM;;;;;;;IAHD,yFAA4B;IAE/B,0DACF;IADE,kPACF;;;IA5FF,0EAAsD;IAC1B,uDAAiB;IAAA,4DAAQ;IAEnD,4EAAsC;IACpC,mKAQuD;IAEvD,mKAQuD;IAEvD,mKAQuD;IAEvD,qKASS;IAET,+JASM;IAEN,+JAeM;IAEN,qKAOuD;IAEvD,mLAEe;IACjB,qEAAe;IAEf,iKAKM;IACR,4DAAM;;;;;;;IA5FG,0DAAkB;IAAlB,+EAAkB;IAAC,0DAAiB;IAAjB,gFAAiB;IAE7B,0DAAuB;IAAvB,oFAAuB;IAC3B,0DAAoB;IAApB,gFAAoB;IAUpB,0DAAsB;IAAtB,kFAAsB;IAUtB,0DAAqB;IAArB,iFAAqB;IAUpB,0DAAsB;IAAtB,kFAAsB;IAWzB,0DAAwB;IAAxB,oFAAwB;IAWxB,0DAAqB;IAArB,iFAAqB;IAiBnB,0DAAoB;IAApB,gFAAoB;IASb,0DAAsB;IAAtB,kFAAsB;IAKjC,0DAA+I;IAA/I,qeAA+I;;;IAxFzJ,wEAAgD;IAC9C,2JA6FM;IACR,qEAAe;;;;IA9FY,0DAA2B;IAA3B,mGAA2B;;;IAR1D,0EAE0B;IACpB,uDAAgB;IAAA,4DAAK;IACzB,wEAA4B;IAAA,uDAAsB;IAAA,4DAAI;IAEtD,4EAA4C;IAC1C,2JA+Fe;IACjB,qEAAe;IACjB,4DAAM;;;IAvGD,sFAAiB;IAEhB,0DAAgB;IAAhB,+EAAgB;IACQ,0DAAsB;IAAtB,qFAAsB;IAEpC,0DAA6B;IAA7B,iGAA6B;IACT,0DAAc;IAAd,oFAAc;;;IARpD,wEAAmE;IACjE,oIAwGM;IACR,qEAAe;;;;;IAzGP,0DAAmD;IAAnD,qIAAmD;;;;IA6GzD,6EAAkG;IAA5E,4SAAS,4EAAU,KAAC;IAAwD,+DAAI;IAAA,4DAAS;;;IAC/G,6EAAwG;IAAA,uDAA6C;IAAA,4DAAS;;;IAA/E,wFAAwB;IAAC,0DAA6C;IAA7C,+GAA6C;;;IAGvJ,0EAAkE;IAAA,qEAAU;IAAA,4DAAM;;;IAClF,0EAAkE;IAAA,uDAAc;IAAA,4DAAM;;;IAApB,0DAAc;IAAd,gFAAc;;;IAChF,0EAAsE;IAAA,uFAA4B;IAAA,4DAAM;;;;IAvI5G,yEAAgI;IAC1H,uDAAsB;IAAA,4DAAK;IAE/B,yEAA6H;IAC3H,oEAAiE;IACnE,4DAAM;IACN,yEAA2B;IAAA,uDAAkC;IAAA,4DAAM;IAEnE,yEAA4B;IAC1B,mHAMM;IACR,4DAAM;IAEN,6EAAgE;IAAvC,qSAAY,4EAAU,KAAC;IAC9C,uIA0Ge;IAEf,2EAA6B;IACL,kSAAS,gFAAc,KAAC;IAAqC,oEAAQ;IAAA,4DAAS;IACpG,4HAA+G;IAC/G,4HAA8J;IAChK,4DAAM;IAEN,sHAAkF;IAClF,sHAAsF;IACtF,sHAAwG;IAC1G,4DAAO;;;IAxI2C,uGAAuC;IACrF,0DAAsB;IAAtB,wFAAsB;IAEmB,0DAAyC;IAAzC,qGAAyC;IAC9D,0DAAoC;IAApC,kGAAoC;IAEjC,0DAAkC;IAAlC,6GAAkC;IAGrC,0DAAqB;IAArB,4FAAqB;IASvC,0DAAkB;IAAlB,kFAAkB;IACS,0DAAqB;IAArB,4FAAqB;IA6GH,0DAAmC;IAAnC,mGAAmC;IACtC,0DAAoD;IAApD,8HAAoD;IACzE,0DAAsD;IAAtD,gIAAsD;IAGzE,0DAAa;IAAb,gFAAa;IACb,0DAAc;IAAd,iFAAc;IACd,0DAAmB;IAAnB,sFAAmB;;AD9GtB,MAAM,iBAAiB;IA6B5B,YACU,EAAe,EACf,UAAsB,EACtB,gBAAkC,EAClC,GAAsB,EACtB,QAAkB;QAJlB,OAAE,GAAF,EAAE,CAAa;QACf,eAAU,GAAV,UAAU,CAAY;QACtB,qBAAgB,GAAhB,gBAAgB,CAAkB;QAClC,QAAG,GAAH,GAAG,CAAmB;QACtB,aAAQ,GAAR,QAAQ,CAAU;QAd5B,qBAAgB,GAAG,CAAC,CAAC;QACrB,cAAS,GAAG,KAAK,CAAC;QAClB,YAAO,GAAG,KAAK,CAAC;QAChB,aAAQ,GAAkB,IAAI,CAAC;QAC/B,kBAAa,GAAG,KAAK,CAAC;QACtB,uBAAkB,GAAG,CAAC,CAAC;QAEf,aAAQ,GAAG,IAAI,yCAAO,EAAQ,CAAC;IAQpC,CAAC;IAjCJ,IAAa,UAAU,CAAC,KAAiB;QACvC,IAAI,CAAC,WAAW,GAAG,KAAK,CAAC;QACzB,IAAI,CAAC,QAAQ,EAAE,CAAC;IAClB,CAAC;IACD,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACD,IAAa,WAAW,CAAC,KAAU;QACjC,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC1B,IAAI,IAAI,CAAC,IAAI,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;IACH,CAAC;IAsBD,QAAQ;QACN,IAAI,CAAC,gBAAgB,CAAC,QAAQ;aAC3B,IAAI,CAAC,yDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC,SAAS,CAAC,EAAE;YACrB,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YACzB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,gBAAgB,CAAC,MAAM;aACzB,IAAI,CAAC,yDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC,KAAK,CAAC,EAAE;YACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;YACtB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;QAC3B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;YACnC,MAAM,SAAS,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;YACpC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC1B,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAC/G,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SACzC;QAED,IAAI,CAAC,IAAI,CAAC,YAAY;aACnB,IAAI,CAAC,yDAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC,GAAG,EAAE;YACd,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CAAC,CAAC;QAEL,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;QAC1B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,aAAa,GAAG,KAAK,CAAC;QAC3B,IAAI,CAAC,cAAc,EAAE,CAAC;QACtB,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,IAAI,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACnB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,CACvD,CAAC,QAAQ,EAAE,EAAE;gBACX,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;gBAC1B,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC,EACD,CAAC,KAAK,EAAE,EAAE;gBACR,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,uBAAuB,CAAC,CAAC;gBACxD,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAC1C,CAAC,CACF,CAAC;SACH;aAAM;YACL,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACpC;IACH,CAAC;IAED,aAAa,CAAC,IAAgB;QAC5B,OAAO,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5D,CAAC;IAED,cAAc,CAAC,KAAkB;QAC/B,OAAO,CAAC,KAAK,CAAC,SAAS,IAAI,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC9D,CAAC;IAED,eAAe,CAAC,KAAkB;QAChC,OAAO,KAAK,CAAC,QAAQ,KAAK,KAAK,CAAC;IAClC,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,gBAAgB,GAAG,CAAC,EAAE;YAC7B,IAAI,CAAC,gBAAgB,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,EAAE,CAAC;SACpB;IACH,CAAC;IAED,QAAQ;QACN,MAAM,WAAW,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QACjE,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAc,CAAC;QAE7D,IAAI,SAAS,IAAI,SAAS,CAAC,KAAK,EAAE;YAChC,IAAI,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5D,IAAI,CAAC,gBAAgB,EAAE,CAAC;gBACxB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SACF;aAAM;YACL,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAC5C,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;gBACnC,IAAI,OAAO,EAAE;oBACX,OAAO,CAAC,aAAa,EAAE,CAAC;iBACzB;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,2BAA2B,EAAE,CAAC;SACpC;IACH,CAAC;IAEO,2BAA2B;QACjC,MAAM,mBAAmB,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,aAAa,CAAC,0DAA0D,CAAC,CAAC;QACvI,IAAI,mBAAmB,EAAE;YACvB,mBAAmB,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;SAC7E;IACH,CAAC;IAEO,WAAW;QACjB,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC,CAAC;IAC1F,CAAC;IAEO,cAAc;QACpB,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC9C,MAAM,eAAe,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;QACtD,IAAI,CAAC,kBAAkB,GAAG,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,eAAe,GAAG,WAAW,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAClG,IAAI,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC;IAC3B,CAAC;IAEO,kBAAkB;QACxB,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAClD,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;gBAC5B,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC;aAC/E;YACD,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAEO,sBAAsB;QAC5B,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;YAClD,IAAI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE;gBAC5B,MAAM,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAc,CAAC;gBACtD,OAAO,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CACxC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC;oBAC1B,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK;oBAChC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,IAAI;oBACzC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,EAAE,CACxC,CAAC,MAAM,CAAC;aACV;YACD,OAAO,KAAK,CAAC;QACf,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC;IAED,cAAc,CAAC,KAAkB,EAAE,IAAgB;QACjD,OAAO,0DAAe,CAAC;YACrB,SAAS,EAAE;gBACT,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE;gBACrC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE;gBACnC,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,EAAE;aACzC;YACD,MAAM,EAAE,IAAI,CAAC,QAAQ;SACtB,CAAC,CAAC;IACL,CAAC;IAED,eAAe,CAAC,KAAkB,EAAE,MAAW;QAC7C,IAAI,OAAO,KAAK,CAAC,YAAY,KAAK,UAAU,EAAE;YAC5C,OAAO,KAAK,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;SACnC;QACD,OAAO,KAAK,CAAC,YAAY,IAAI,eAAe,CAAC;IAC/C,CAAC;IAEO,aAAa,CAAC,KAAkB;QACtC,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,KAAK,CAAC,QAAQ,EAAE;YAClB,UAAU,CAAC,IAAI,CAAC,+DAAmB,CAAC,CAAC;SACtC;QACD,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,EAAE;YAC1B,UAAU,CAAC,IAAI,CAAC,4DAAgB,CAAC,CAAC;SACnC;QACD,IAAI,KAAK,CAAC,UAAU,EAAE;YACpB,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC;SACtC;QACD,OAAO,UAAU,CAAC;IACpB,CAAC;kFAvNU,iBAAiB;+GAAjB,iBAAiB;;;;;;YCzB9B,+GAyIM;;YAzI4B,gFAAgB;84YDapC;gBACV,4DAAO,CAAC,gBAAgB,EAAE;oBACxB,+DAAU,CAAC,QAAQ,EAAE;wBACnB,0DAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,kBAAkB,EAAE,CAAC;wBACpD,4DAAO,CAAC,gBAAgB,EAAE,0DAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,gBAAgB,EAAE,CAAC,CAAC;qBAC9E,CAAC;oBACF,+DAAU,CAAC,QAAQ,EAAE;wBACnB,4DAAO,CAAC,eAAe,EAAE,0DAAK,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,SAAS,EAAE,mBAAmB,EAAE,CAAC,CAAC;qBAChF,CAAC;iBACH,CAAC;aACH;;;;;;;;;;;;;;;;;;;AEtBmC;AACC;;AAMhC,MAAM,UAAU;IACrB,eAAe;QACb,4CAA4C;QAC5C,MAAM,UAAU,GAAe;YAC7B,EAAE,EAAE,kBAAkB;YACtB,KAAK,EAAE,wBAAwB;YAC/B,KAAK,EAAE;gBACL;oBACE,EAAE,EAAE,cAAc;oBAClB,KAAK,EAAE,sBAAsB;oBAC7B,WAAW,EAAE,iDAAiD;oBAC9D,MAAM,EAAE;wBACN,EAAE,IAAI,EAAE,WAAW,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,wBAAwB,EAAE;wBAChH,EAAE,IAAI,EAAE,UAAU,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,uBAAuB,EAAE;wBAC7G,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,yBAAyB,EAAE;wBACzG;4BACE,IAAI,EAAE,KAAK;4BACX,KAAK,EAAE,KAAK;4BACZ,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,IAAI;4BACd,YAAY,EAAE,gCAAgC;4BAC9C,UAAU,EAAE;gCACV,CAAC,OAAO,EAAE,EAAE;oCACV,MAAM,KAAK,GAAG,OAAO,CAAC,KAAK,CAAC;oCAC5B,IAAI,KAAK,GAAG,EAAE,IAAI,KAAK,GAAG,GAAG,EAAE;wCAC7B,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC;qCAC3B;oCACD,OAAO,IAAI,CAAC;gCACd,CAAC;6BACF;yBACF;qBACF;iBACF;gBACD;oBACE,EAAE,EAAE,aAAa;oBACjB,KAAK,EAAE,qBAAqB;oBAC5B,WAAW,EAAE,sCAAsC;oBACnD,MAAM,EAAE;wBACN,EAAE,IAAI,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,oBAAoB,EAAE;wBACrG,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,kBAAkB,EAAE;wBAC/F,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,sBAAsB,EAAE;wBAC1G;4BACE,IAAI,EAAE,SAAS;4BACf,KAAK,EAAE,SAAS;4BAChB,IAAI,EAAE,QAAQ;4BACd,QAAQ,EAAE,IAAI;4BACd,YAAY,EAAE,qBAAqB;4BACnC,OAAO,EAAE;gCACP,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,eAAe,EAAE;gCACxC,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE;gCACpC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,gBAAgB,EAAE;6BACzC;yBACF;qBACF;iBACF;gBACD;oBACE,EAAE,EAAE,aAAa;oBACjB,KAAK,EAAE,aAAa;oBACpB,WAAW,EAAE,+BAA+B;oBAC5C,MAAM,EAAE;wBACN,EAAE,IAAI,EAAE,YAAY,EAAE,KAAK,EAAE,yBAAyB,EAAE,IAAI,EAAE,UAAU,EAAE,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE,EAAE;wBAC7G;4BACE,IAAI,EAAE,OAAO;4BACb,KAAK,EAAE,iBAAiB;4BACxB,IAAI,EAAE,OAAO;4BACb,QAAQ,EAAE,IAAI;4BACd,YAAY,EAAE,uBAAuB;4BACrC,OAAO,EAAE;gCACP,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE;gCAClC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;6BACjC;yBACF;qBACF;oBACD,SAAS,EAAE,CAAC,SAAS,EAAE,EAAE,CAAC,SAAS,CAAC,YAAY,IAAI,SAAS,CAAC,YAAY,CAAC,GAAG,IAAI,EAAE;iBACrF;aACF;YACD,gBAAgB,EAAE,uBAAuB;YACzC,gBAAgB,EAAE,QAAQ;SAC3B,CAAC;QACF,OAAO,wCAAE,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,qDAAK,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,CAAC;IAED,aAAa;QACX,2CAA2C;QAC3C,MAAM,QAAQ,GAAG;YACf,YAAY,EAAE;gBACZ,SAAS,EAAE,YAAY;gBACvB,QAAQ,EAAE,OAAO;gBACjB,KAAK,EAAE,wBAAwB;gBAC/B,GAAG,EAAE,EAAE;aACR;YACD,WAAW,EAAE;gBACX,MAAM,EAAE,aAAa;gBACrB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,OAAO;gBAChB,OAAO,EAAE,KAAK;aACf;YACD,WAAW,EAAE;gBACX,UAAU,EAAE,IAAI;gBAChB,KAAK,EAAE,OAAO;aACf;SACF,CAAC;QACF,OAAO,wCAAE,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,qDAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACxC,CAAC;IAED,cAAc,CAAC,IAAS;QACtB,oCAAoC;QACpC,OAAO,CAAC,GAAG,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QACtC,OAAO,wCAAE,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,EAAE,6BAA6B,EAAE,CAAC,CAAC,IAAI,CAAC,qDAAK,CAAC,IAAI,CAAC,CAAC,CAAC;IACzF,CAAC;2EA7GU,UAAU;kHAAV,UAAU,WAAV,UAAU,mBAFT,MAAM;;;;;;;;;;;;;;;;;;ACL+B;;AAM5C,MAAM,gBAAgB;IAH7B;QAIU,sBAAiB,GAAG,IAAI,iDAAe,CAAoB,IAAI,CAAC,CAAC;QACjE,oBAAe,GAAG,IAAI,iDAAe,CAAM,IAAI,CAAC,CAAC;QACjD,4BAAuB,GAAG,IAAI,iDAAe,CAAS,CAAC,CAAC,CAAC;QACzD,mBAAc,GAAG,IAAI,iDAAe,CAAU,KAAK,CAAC,CAAC;QACrD,iBAAY,GAAG,IAAI,iDAAe,CAAgB,IAAI,CAAC,CAAC;QAEhE,gBAAW,GAAkC,IAAI,CAAC,iBAAiB,CAAC,YAAY,EAAE,CAAC;QACnF,cAAS,GAAoB,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,CAAC;QACjE,sBAAiB,GAAuB,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,CAAC;QACpF,aAAQ,GAAwB,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;QACnE,WAAM,GAA8B,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;KAsDtE;IApDC,aAAa,CAAC,MAAkB;QAC9B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAED,WAAW,CAAC,IAAS;QACnB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClC,CAAC;IAED,mBAAmB,CAAC,KAAa;QAC/B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC3C,CAAC;IAED,UAAU,CAAC,SAAkB;QAC3B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACtC,CAAC;IAED,QAAQ,CAAC,KAAoB;QAC3B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAChC,CAAC;IAED,OAAO,CAAC,IAAgB;QACtB,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QACxD,IAAI,aAAa,EAAE;YACjB,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,UAAU,CAAC,MAAc;QACvB,MAAM,aAAa,GAAG,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,CAAC;QACxD,IAAI,aAAa,EAAE;YACjB,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;YAC7E,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;SAC5C;IACH,CAAC;IAED,YAAY;QACV,IAAI,IAAI,CAAC,iBAAiB,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE;YACtD,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;SACvF;IACH,CAAC;IAED,YAAY;QACV,MAAM,aAAa,GAAG,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAC3D,IAAI,aAAa,EAAE;YACjB,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;SACtD;IACH,CAAC;IAED,aAAa;QACX,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IAC1C,CAAC;iFAhEU,gBAAgB;kHAAhB,gBAAgB,WAAhB,gBAAgB,mBAFf,MAAM;;;;;;;;;;;;;;;;;;;;;;;ACJ2B;AACM;AAC0B;AACA;AAC3B;AACa;;AAQ1D,MAAM,iBAAiB;kFAAjB,iBAAiB;8GAAjB,iBAAiB;mHAFjB,CAAC,6DAAU,EAAE,0EAAgB,CAAC,YAF/B,yDAAY,EAAE,+DAAmB,EAAE,yFAAuB;;mIAIzD,iBAAiB,mBALb,wFAAiB,aACtB,yDAAY,EAAE,+DAAmB,EAAE,yFAAuB,aAC1D,wFAAiB;;;;;;;;;;;;;;;ACXtB,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;IACjB,QAAQ,EAAE,OAAO,CAAC,+EAA+E;CAClG,CAAC;;;;;;;;;;;;;;;;;ACF6C;AACF;AACY;AAEzD,IAAI,6EAAsB,EAAE;IAC1B,6DAAc,EAAE,CAAC;CAClB;AAED,wEAAwB,CAAC,eAAe,CAAC,sDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,qCAAqC,EAAE,GAAG,CAAC,CAAC,CAAC","sources":["./src/app/app.component.ts","./src/app/app.module.ts","./src/app/form-configs/advanced-form.config.ts","./src/app/form-configs/basic-form.config.ts","./src/app/form-configs/security-form.config.ts","./src/app/step-form-kit/components/step-form/step-form.component.ts","./src/app/step-form-kit/components/step-form/step-form.component.html","./src/app/step-form-kit/services/api.service.ts","./src/app/step-form-kit/services/form-state.service.ts","./src/app/step-form-kit/step-form-kit.module.ts","./src/environments/environment.ts","./src/main.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FormConfig } from './step-form-kit/models/form-config.model';\nimport { basicFormConfig } from './form-configs/basic-form.config';\nimport { advancedFormConfig } from './form-configs/advanced-form.config';\nimport { securityFormConfig } from './form-configs/security-form.config';\n\n@Component({\n  selector: 'app-root',\n  template: `\n    <div class=\"container\">\n      <h1>StepFormKit Demo</h1>\n      <nav>\n  <button \n    (click)=\"setFormConfig('basic')\" \n    [class.active]=\"currentForm === 'basic'\" \n    [ngStyle]=\"{ color: currentForm === 'basic' ? 'white' : 'black' }\">\n    Basic Form\n  </button>\n  <button \n    (click)=\"setFormConfig('advanced')\" \n    [class.active]=\"currentForm === 'advanced'\" \n    [ngStyle]=\"{ color: currentForm === 'advanced' ? 'white' : 'black' }\">\n    Advanced Form\n  </button>\n  <button \n    (click)=\"setFormConfig('security')\" \n    [class.active]=\"currentForm === 'security'\" \n    [ngStyle]=\"{ color: currentForm === 'security' ? 'white' : 'black' }\">\n    Security Form\n  </button>\n</nav>\n      <app-step-form [formConfig]=\"formConfig\" [initialData]=\"currentFormData\"></app-step-form>\n    </div>\n  `,\n  styles: [`\n    .container {\n      max-width: 800px;\n      margin: 0 auto;\n      padding: 20px;\n    }\n    h1 {\n      text-align: center;\n      margin-bottom: 20px;\n    }\n    nav {\n      display: flex;\n      justify-content: center;\n      margin-bottom: 20px;\n    }\n    button {\n      margin: 0 10px;\n      padding: 10px 20px;\n      font-size: 16px;\n      cursor: pointer;\n      background-color: #f0f0f0;\n      border: none;\n      border-radius: 5px;\n      transition: background-color 0.3s;\n    }\n    button:hover {\n      background-color: #e0e0e0;\n    }\n    button.active {\n      background-color: #007bff;\n      color: white;\n    }\n  `]\n})\nexport class AppComponent {\n  formConfig: FormConfig = basicFormConfig;\n  currentForm: string = 'basic';\n  currentFormData: any;\n\n  private basicFormData = {\n    personalInfo: {\n      firstName: 'Pushpendra',\n      lastName: 'Singh',\n      email: 'Pushpendra@example.com'\n    }\n  };\n\n  private advancedFormData = {\n    personalInfo: {\n      firstName: 'Pushpendra',\n      lastName: 'Singh',\n      email: 'Pushpendra@example.com',\n      phone: '123-456-7890',\n      birthDate: '2000-01-01'\n    },\n    addressInfo: {\n      street: '123 Main St',\n      city: 'Anytown',\n      state: 'CA',\n      zipCode: '12345',\n      country: 'us'\n    },\n    preferences: {\n      newsletter: true,\n      theme: 'light',\n      language: 'en'\n    }\n  };\n\n  private securityFormData = {\n    personalInfo: {\n      firstName: 'Pushpendra',\n      lastName: 'Singh',\n      employeeId: 'EMP123',\n      email: 'Pushpendra@companysecurity.com'\n    },\n    securityCredentials: {\n      clearanceLevel: 'secret',\n      clearanceNumber: 'SC123456',\n      expirationDate: '2025-12-31'\n    },\n    specialization: {\n      primaryRole: 'networkSecurity',\n      certifications: ['cissp', 'ceh'],\n      yearsOfExperience: 5\n    }\n  };\n\n  setFormConfig(formType: string) {\n    this.currentForm = formType;\n    switch (formType) {\n      case 'advanced':\n        this.formConfig = advancedFormConfig;\n        this.currentFormData = this.advancedFormData;\n        break;\n      case 'security':\n        this.formConfig = securityFormConfig;\n        this.currentFormData = this.securityFormData;\n        break;\n      default:\n        this.formConfig = basicFormConfig;\n        this.currentFormData = this.basicFormData;\n    }\n  }\n}","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { AppComponent } from './app.component';\nimport { StepFormKitModule } from './step-form-kit/step-form-kit.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    StepFormKitModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }","import { FormConfig } from '../step-form-kit/models/form-config.model';\n\nexport const advancedFormConfig: FormConfig = {\n  id: 'advancedForm',\n  title: 'Advanced User Registration',\n  steps: [\n    {\n      id: 'personalInfo',\n      title: 'Personal Information',\n      description: 'Please provide your detailed personal information.',\n      fields: [\n        { name: 'firstName', label: 'First Name', type: 'text', required: true, errorMessage: 'First name is required' },\n        { name: 'lastName', label: 'Last Name', type: 'text', required: true, errorMessage: 'Last name is required' },\n        { name: 'email', label: 'Email', type: 'email', required: true, errorMessage: 'Valid email is required' },\n        { name: 'phone', label: 'Phone Number', type: 'text', required: false, errorMessage: 'Invalid phone number' },\n        { name: 'birthDate', label: 'Date of Birth', type: 'date', required: true, errorMessage: 'Date of birth is required' }\n      ]\n    },\n    {\n      id: 'addressInfo',\n      title: 'Address Information',\n      description: 'Please provide your current address.',\n      fields: [\n        { name: 'street', label: 'Street Address', type: 'text', required: true, errorMessage: 'Street address is required' },\n        { name: 'city', label: 'City', type: 'text', required: true, errorMessage: 'City is required' },\n        { name: 'state', label: 'State/Province', type: 'text', required: true, errorMessage: 'State/Province is required' },\n        { name: 'zipCode', label: 'Zip/Postal Code', type: 'text', required: true, errorMessage: 'Zip/Postal code is required' },\n        { name: 'country', label: 'Country', type: 'select', required: true, errorMessage: 'Country is required', options: [\n          { value: 'us', label: 'United States' },\n          { value: 'ca', label: 'Canada' },\n          { value: 'uk', label: 'United Kingdom' },\n          { value: 'au', label: 'Australia' }\n        ]}\n      ]\n    },\n    {\n      id: 'preferences',\n      title: 'User Preferences',\n      description: 'Set your account preferences.',\n      fields: [\n        { name: 'newsletter', label: 'Subscribe to newsletter', type: 'checkbox', required: false, errorMessage: '' }, // Added empty errorMessage\n        { name: 'theme', label: 'Preferred theme', type: 'radio', required: true, errorMessage: 'Please select a theme', options: [\n          { value: 'light', label: 'Light' },\n          { value: 'dark', label: 'Dark' },\n          { value: 'system', label: 'System Default' }\n        ]},\n        { name: 'language', label: 'Preferred Language', type: 'select', required: true, errorMessage: 'Please select a language', options: [\n          { value: 'en', label: 'English' },\n          { value: 'es', label: 'Spanish' },\n          { value: 'fr', label: 'French' },\n          { value: 'de', label: 'German' }\n        ]}\n      ]\n    }\n  ],\n  submitButtonText: 'Complete Registration',\n  cancelButtonText: 'Cancel'\n};","import { FormConfig } from '../step-form-kit/models/form-config.model';\n\nexport const basicFormConfig: FormConfig = {\n  id: 'basicForm',\n  title: 'Basic Information Form',\n  steps: [\n    {\n      id: 'personalInfo',\n      title: 'Personal Information',\n      description: 'Please provide your basic personal information.',\n      fields: [\n        { name: 'firstName', label: 'First Name', type: 'text', required: true, errorMessage: 'First name is required' },\n        { name: 'lastName', label: 'Last Name', type: 'text', required: true, errorMessage: 'Last name is required' },\n        { name: 'email', label: 'Email', type: 'email', required: true, errorMessage: 'Valid email is required' }\n      ]\n    }\n  ],\n  submitButtonText: 'Submit Basic Info',\n  cancelButtonText: 'Cancel'\n};","import { FormConfig } from '../step-form-kit/models/form-config.model';\n\nexport const securityFormConfig: FormConfig = {\n  id: 'securityForm',\n  title: 'Security Personnel Information Form',\n  steps: [\n    {\n      id: 'personalInfo',\n      title: 'Personal Information',\n      description: 'Please provide your basic personal information.',\n      fields: [\n        { name: 'firstName', label: 'First Name', type: 'text', required: true, errorMessage: 'First name is required' },\n        { name: 'lastName', label: 'Last Name', type: 'text', required: true, errorMessage: 'Last name is required' },\n        { name: 'employeeId', label: 'Employee ID', type: 'text', required: true, errorMessage: 'Employee ID is required' },\n        { name: 'email', label: 'Work Email', type: 'email', required: true, errorMessage: 'Valid work email is required' }\n      ]\n    },\n    {\n      id: 'securityCredentials',\n      title: 'Security Credentials',\n      description: 'Provide your security clearance information.',\n      fields: [\n        { \n          name: 'clearanceLevel', \n          label: 'Security Clearance Level', \n          type: 'select', \n          required: true, \n          errorMessage: 'Security clearance level is required',\n          options: [\n            { value: 'confidential', label: 'Confidential' },\n            { value: 'secret', label: 'Secret' },\n            { value: 'topsecret', label: 'Top Secret' },\n            { value: 'tssci', label: 'TS/SCI' }\n          ]\n        },\n        { name: 'clearanceNumber', label: 'Clearance Number', type: 'text', required: true, errorMessage: 'Clearance number is required' },\n        { name: 'expirationDate', label: 'Clearance Expiration Date', type: 'date', required: true, errorMessage: 'Expiration date is required' }\n      ]\n    },\n    {\n      id: 'specialization',\n      title: 'Security Specialization',\n      description: 'Provide information about your security specialization.',\n      fields: [\n        { \n          name: 'primaryRole', \n          label: 'Primary Security Role', \n          type: 'select', \n          required: true, \n          errorMessage: 'Primary security role is required',\n          options: [\n            { value: 'dataProtection', label: 'Data Protection Officer' },\n            { value: 'networkSecurity', label: 'Network Security Specialist' },\n            { value: 'incidentResponse', label: 'Incident Response Analyst' },\n            { value: 'accessControl', label: 'Access Control Manager' },\n            { value: 'complianceOfficer', label: 'Compliance Officer' }\n          ]\n        },\n        { \n          name: 'certifications', \n          label: 'Security Certifications', \n          type: 'checkbox', \n          required: false, \n          errorMessage: '',\n          options: [\n            { value: 'cissp', label: 'CISSP' },\n            { value: 'cism', label: 'CISM' },\n            { value: 'ceh', label: 'CEH' },\n            { value: 'comptia', label: 'CompTIA Security+' },\n            { value: 'giac', label: 'GIAC' }\n          ]\n        },\n        { name: 'yearsOfExperience', label: 'Years of Security Experience', type: 'number', required: true, errorMessage: 'Years of experience is required' }\n      ]\n    }\n  ],\n  submitButtonText: 'Submit Security Personnel Information',\n  cancelButtonText: 'Cancel'\n};","import { Component, OnInit, OnDestroy, ElementRef, ViewChild, ChangeDetectorRef, Input, Injector } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { StepConfig, FieldConfig, FormConfig } from '../../models/form-config.model';\nimport { ApiService } from '../../services/api.service';\nimport { FormStateService } from '../../services/form-state.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\nimport { trigger, transition, style, animate } from '@angular/animations';\n\n@Component({\n  selector: 'app-step-form',\n  templateUrl: './step-form.component.html',\n  styleUrls: ['./step-form.component.scss'],\n  animations: [\n    trigger('stepTransition', [\n      transition(':enter', [\n        style({ opacity: 0, transform: 'translateX(100%)' }),\n        animate('300ms ease-out', style({ opacity: 1, transform: 'translateX(0%)' }))\n      ]),\n      transition(':leave', [\n        animate('300ms ease-in', style({ opacity: 0, transform: 'translateX(-100%)' }))\n      ])\n    ])\n  ]\n})\nexport class StepFormComponent implements OnInit, OnDestroy {\n  @ViewChild('formContainer') formContainer!: ElementRef;\n  @Input() set formConfig(value: FormConfig) {\n    this._formConfig = value;\n    this.initForm();\n  }\n  get formConfig(): FormConfig {\n    return this._formConfig;\n  }\n  @Input() set initialData(value: any) {\n    this._initialData = value;\n    if (this.form) {\n      this.form.patchValue(value);\n      this.updateProgress();\n    }\n  }\n  \n  private _formConfig!: FormConfig;\n  private _initialData: any;\n  form!: FormGroup;\n  currentStepIndex = 0;\n  submitted = false;\n  loading = false;\n  apiError: string | null = null;\n  formSubmitted = false;\n  progressPercentage = 0;\n\n  private destroy$ = new Subject<void>();\n\n  constructor(\n    private fb: FormBuilder,\n    private apiService: ApiService,\n    private formStateService: FormStateService,\n    private cdr: ChangeDetectorRef,\n    private injector: Injector\n  ) {}\n\n  ngOnInit(): void {\n    this.formStateService.loading$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(isLoading => {\n        this.loading = isLoading;\n        this.cdr.detectChanges();\n      });\n\n    this.formStateService.error$\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(error => {\n        this.apiError = error;\n        this.cdr.detectChanges();\n      });\n  }\n\n  ngOnDestroy(): void {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private initForm(): void {\n    this.form = this.fb.group({});\n    this.formConfig.steps.forEach(step => {\n      const stepGroup = this.fb.group({});\n      step.fields.forEach(field => {\n        stepGroup.addControl(field.name, this.fb.control({ value: '', disabled: false }, this.getValidators(field)));\n      });\n      this.form.addControl(step.id, stepGroup);\n    });\n\n    if (this._initialData) {\n      this.form.patchValue(this._initialData);\n    }\n\n    this.form.valueChanges\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        this.updateProgress();\n      });\n\n    this.currentStepIndex = 0;\n    this.submitted = false;\n    this.formSubmitted = false;\n    this.updateProgress();\n    this.cdr.detectChanges();\n  }\n\n  onSubmit(): void {\n    this.submitted = true;\n    if (this.form.valid) {\n      this.formStateService.setLoading(true);\n      this.apiService.submitFormData(this.form.value).subscribe(\n        (response) => {\n          this.formSubmitted = true;\n          this.formStateService.setLoading(false);\n        },\n        (error) => {\n          this.formStateService.setError('Error submitting form');\n          this.formStateService.setLoading(false);\n        }\n      );\n    } else {\n      this.scrollToFirstInvalidControl();\n    }\n  }\n\n  isStepVisible(step: StepConfig): boolean {\n    return !step.condition || step.condition(this.form.value);\n  }\n\n  isFieldVisible(field: FieldConfig): boolean {\n    return !field.condition || field.condition(this.form.value);\n  }\n\n  isFieldEditable(field: FieldConfig): boolean {\n    return field.editable !== false;\n  }\n\n  previousStep(): void {\n    if (this.currentStepIndex > 0) {\n      this.currentStepIndex--;\n      this.scrollToTop();\n    }\n  }\n\n  nextStep(): void {\n    const currentStep = this.formConfig.steps[this.currentStepIndex];\n    const stepGroup = this.form.get(currentStep.id) as FormGroup;\n    \n    if (stepGroup && stepGroup.valid) {\n      if (this.currentStepIndex < this.formConfig.steps.length - 1) {\n        this.currentStepIndex++;\n        this.scrollToTop();\n      }\n    } else {\n      Object.keys(stepGroup.controls).forEach(key => {\n        const control = stepGroup.get(key);\n        if (control) {\n          control.markAsTouched();\n        }\n      });\n      this.scrollToFirstInvalidControl();\n    }\n  }\n\n  private scrollToFirstInvalidControl(): void {\n    const firstInvalidControl = this.formContainer.nativeElement.querySelector('input.ng-invalid, select.ng-invalid, textarea.ng-invalid');\n    if (firstInvalidControl) {\n      firstInvalidControl.scrollIntoView({ behavior: 'smooth', block: 'center' });\n    }\n  }\n\n  private scrollToTop(): void {\n    this.formContainer.nativeElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n  }\n\n  private updateProgress(): void {\n    const totalFields = this.getTotalFieldCount();\n    const completedFields = this.getCompletedFieldCount();\n    this.progressPercentage = totalFields > 0 ? Math.round((completedFields / totalFields) * 100) : 0;\n    this.cdr.detectChanges();\n  }\n\n  private getTotalFieldCount(): number {\n    return this.formConfig.steps.reduce((total, step) => {\n      if (this.isStepVisible(step)) {\n        return total + step.fields.filter(field => this.isFieldVisible(field)).length;\n      }\n      return total;\n    }, 0);\n  }\n\n  private getCompletedFieldCount(): number {\n    return this.formConfig.steps.reduce((total, step) => {\n      if (this.isStepVisible(step)) {\n        const stepGroup = this.form.get(step.id) as FormGroup;\n        return total + step.fields.filter(field => \n          this.isFieldVisible(field) && \n          stepGroup.get(field.name)?.valid &&\n          stepGroup.get(field.name)?.value !== null &&\n          stepGroup.get(field.name)?.value !== ''\n        ).length;\n      }\n      return total;\n    }, 0);\n  }\n\n  createInjector(field: FieldConfig, step: StepConfig): Injector {\n    return Injector.create({\n      providers: [\n        { provide: 'field', useValue: field },\n        { provide: 'step', useValue: step },\n        { provide: 'form', useValue: this.form }\n      ],\n      parent: this.injector\n    });\n  }\n\n  getErrorMessage(field: FieldConfig, errors: any): string {\n    if (typeof field.errorMessage === 'function') {\n      return field.errorMessage(errors);\n    }\n    return field.errorMessage || 'Invalid input';\n  }\n\n  private getValidators(field: FieldConfig) {\n    const validators = [];\n    if (field.required) {\n      validators.push(Validators.required);\n    }\n    if (field.type === 'email') {\n      validators.push(Validators.email);\n    }\n    if (field.validators) {\n      validators.push(...field.validators);\n    }\n    return validators;\n  }\n}","<div class=\"step-form-container\" *ngIf=\"formConfig\" [ngClass]=\"formConfig.theme || 'light'\" [ngStyle]=\"formConfig.customStyles\">\n  <h1>{{ formConfig.title }}</h1>\n  \n  <div class=\"progress-bar\" role=\"progressbar\" [attr.aria-valuenow]=\"progressPercentage\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n    <div class=\"progress\" [style.width.%]=\"progressPercentage\"></div>\n  </div>\n  <div class=\"progress-text\">{{ progressPercentage }}% Complete</div>\n\n  <div class=\"step-indicator\">\n    <div *ngFor=\"let step of formConfig.steps; let i = index\" \n         class=\"step\" \n         [class.active]=\"i === currentStepIndex\"\n         [class.completed]=\"i < currentStepIndex\"\n         [attr.aria-current]=\"i === currentStepIndex ? 'step' : null\">\n      {{ step.title }}\n    </div>\n  </div>\n\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" #formContainer>\n    <ng-container *ngFor=\"let step of formConfig.steps; let i = index\">\n      <div *ngIf=\"i === currentStepIndex && isStepVisible(step)\"\n           [@stepTransition]\n           class=\"step-content\">\n        <h2>{{ step.title }}</h2>\n        <p class=\"step-description\">{{ step.description }}</p>\n        \n        <ng-container formGroupName=\"{{ step.id }}\">\n          <ng-container *ngFor=\"let field of step.fields\">\n            <div class=\"form-field\" *ngIf=\"isFieldVisible(field)\">\n              <label [for]=\"field.name\">{{ field.label }}</label>\n              \n              <ng-container [ngSwitch]=\"field.type\">\n                <input *ngSwitchCase=\"'text'\" \n                       [type]=\"field.type\"\n                       [id]=\"field.name\"\n                       [formControlName]=\"field.name\"\n                       [required]=\"field.required\"\n                       [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                       [placeholder]=\"field.placeholder || ''\"\n                       [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                       [attr.aria-describedby]=\"field.name + '-error'\">\n                \n                <input *ngSwitchCase=\"'number'\" \n                       type=\"number\"\n                       [id]=\"field.name\"\n                       [formControlName]=\"field.name\"\n                       [required]=\"field.required\"\n                       [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                       [placeholder]=\"field.placeholder || ''\"\n                       [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                       [attr.aria-describedby]=\"field.name + '-error'\">\n                \n                <input *ngSwitchCase=\"'email'\" \n                       type=\"email\"\n                       [id]=\"field.name\"\n                       [formControlName]=\"field.name\"\n                       [required]=\"field.required\"\n                       [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                       [placeholder]=\"field.placeholder || ''\"\n                       [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                       [attr.aria-describedby]=\"field.name + '-error'\">\n                \n                <select *ngSwitchCase=\"'select'\"\n                        [id]=\"field.name\"\n                        [formControlName]=\"field.name\"\n                        [required]=\"field.required\"\n                        [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                        [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                        [attr.aria-describedby]=\"field.name + '-error'\">\n                  <option value=\"\">Select an option</option>\n                  <option *ngFor=\"let option of field.options\" [value]=\"option.value\">{{ option.label }}</option>\n                </select>\n                \n                <div *ngSwitchCase=\"'checkbox'\" class=\"checkbox-field\">\n                  <input type=\"checkbox\"\n                         [id]=\"field.name\"\n                         [formControlName]=\"field.name\"\n                         [required]=\"field.required\"\n                         [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                         [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                         [attr.aria-describedby]=\"field.name + '-error'\">\n                  <label [for]=\"field.name\">{{ field.label }}</label>\n                </div>\n                \n                <div *ngSwitchCase=\"'radio'\" class=\"radio-group\">\n                  <fieldset>\n                    <legend>{{ field.label }}</legend>\n                    <div *ngFor=\"let option of field.options\" class=\"radio-option\">\n                      <input type=\"radio\"\n                             [id]=\"field.name + '-' + option.value\"\n                             [formControlName]=\"field.name\"\n                             [value]=\"option.value\"\n                             [required]=\"field.required\"\n                             [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                             [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                             [attr.aria-describedby]=\"field.name + '-error'\">\n                      <label [for]=\"field.name + '-' + option.value\">{{ option.label }}</label>\n                    </div>\n                  </fieldset>\n                </div>\n                \n                <input *ngSwitchCase=\"'date'\" \n                       type=\"date\"\n                       [id]=\"field.name\"\n                       [formControlName]=\"field.name\"\n                       [required]=\"field.required\"\n                       [attr.disabled]=\"!isFieldEditable(field) ? '' : null\"\n                       [attr.aria-invalid]=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\"\n                       [attr.aria-describedby]=\"field.name + '-error'\">\n\n                <ng-container *ngSwitchCase=\"'custom'\">\n                  <ng-container *ngComponentOutlet=\"field.customComponent; injector: createInjector(field, step)\"></ng-container>\n                </ng-container>\n              </ng-container>\n              \n              <div *ngIf=\"form.get(step.id)?.get(field.name)?.invalid && (form.get(step.id)?.get(field.name)?.dirty || form.get(step.id)?.get(field.name)?.touched)\" \n                   class=\"error-message\" \n                   [id]=\"field.name + '-error'\" \n                   role=\"alert\">\n                {{ getErrorMessage(field, form.get(step.id)?.get(field.name)?.errors) }}\n              </div>\n            </div>\n          </ng-container>\n        </ng-container>\n      </div>\n    </ng-container>\n\n    <div class=\"form-navigation\">\n      <button type=\"button\" (click)=\"previousStep()\" [disabled]=\"currentStepIndex === 0\">Previous</button>\n      <button type=\"button\" (click)=\"nextStep()\" *ngIf=\"currentStepIndex < formConfig.steps.length - 1\">Next</button>\n      <button type=\"submit\" *ngIf=\"currentStepIndex === formConfig.steps.length - 1\" [disabled]=\"!form.valid\">{{ formConfig.submitButtonText || 'Submit' }}</button>\n    </div>\n\n    <div *ngIf=\"loading\" class=\"loading-indicator\" aria-live=\"polite\">Loading...</div>\n    <div *ngIf=\"apiError\" class=\"error-message\" aria-live=\"assertive\">{{ apiError }}</div>\n    <div *ngIf=\"formSubmitted\" class=\"success-message\" aria-live=\"polite\">Form submitted successfully!</div>\n  </form>\n</div>","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { delay } from 'rxjs/operators';\nimport { FormConfig } from '../models/form-config.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiService {\n  fetchFormConfig(): Observable<FormConfig> {\n    // Mock API call to fetch form configuration\n    const formConfig: FormConfig = {\n      id: 'userRegistration',\n      title: 'User Registration Form',\n      steps: [\n        {\n          id: 'personalInfo',\n          title: 'Personal Information',\n          description: 'Please provide your basic personal information.',\n          fields: [\n            { name: 'firstName', label: 'First Name', type: 'text', required: true, errorMessage: 'First name is required' },\n            { name: 'lastName', label: 'Last Name', type: 'text', required: true, errorMessage: 'Last name is required' },\n            { name: 'email', label: 'Email', type: 'email', required: true, errorMessage: 'Valid email is required' },\n            { \n              name: 'age', \n              label: 'Age', \n              type: 'number', \n              required: true, \n              errorMessage: 'Age must be between 18 and 100',\n              validators: [\n                (control) => {\n                  const value = control.value;\n                  if (value < 18 || value > 100) {\n                    return { ageRange: true };\n                  }\n                  return null;\n                }\n              ]\n            }\n          ]\n        },\n        {\n          id: 'addressInfo',\n          title: 'Address Information',\n          description: 'Please provide your current address.',\n          fields: [\n            { name: 'street', label: 'Street', type: 'text', required: true, errorMessage: 'Street is required' },\n            { name: 'city', label: 'City', type: 'text', required: true, errorMessage: 'City is required' },\n            { name: 'zipCode', label: 'Zip Code', type: 'text', required: true, errorMessage: 'Zip code is required' },\n            { \n              name: 'country', \n              label: 'Country', \n              type: 'select', \n              required: true, \n              errorMessage: 'Country is required', \n              options: [\n                { value: 'usa', label: 'United States' },\n                { value: 'canada', label: 'Canada' },\n                { value: 'uk', label: 'United Kingdom' }\n              ]\n            }\n          ]\n        },\n        {\n          id: 'preferences',\n          title: 'Preferences',\n          description: 'Set your account preferences.',\n          fields: [\n            { name: 'newsletter', label: 'Subscribe to newsletter', type: 'checkbox', required: false, errorMessage: '' },\n            { \n              name: 'theme', \n              label: 'Preferred theme', \n              type: 'radio', \n              required: true, \n              errorMessage: 'Please select a theme', \n              options: [\n                { value: 'light', label: 'Light' },\n                { value: 'dark', label: 'Dark' }\n              ]\n            }\n          ],\n          condition: (formValue) => formValue.personalInfo && formValue.personalInfo.age >= 18\n        }\n      ],\n      submitButtonText: 'Complete Registration',\n      cancelButtonText: 'Cancel'\n    };\n    return of(formConfig).pipe(delay(500));\n  }\n\n  fetchFormData(): Observable<any> {\n    // Mock API call to fetch initial form data\n    const formData = {\n      personalInfo: {\n        firstName: 'Pushpendra',\n        lastName: 'Singh',\n        email: 'Pushpendra@example.com',\n        age: 30\n      },\n      addressInfo: {\n        street: '123 Main St',\n        city: 'Anytown',\n        zipCode: '12345',\n        country: 'usa'\n      },\n      preferences: {\n        newsletter: true,\n        theme: 'light'\n      }\n    };\n    return of(formData).pipe(delay(1000));\n  }\n\n  submitFormData(data: any): Observable<any> {\n    // Mock API call to submit form data\n    console.log('Submitting data:', data);\n    return of({ success: true, message: 'Form submitted successfully' }).pipe(delay(1500));\n  }\n}","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { FormConfig, StepConfig } from '../models/form-config.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class FormStateService {\n  private formConfigSubject = new BehaviorSubject<FormConfig | null>(null);\n  private formDataSubject = new BehaviorSubject<any>(null);\n  private currentStepIndexSubject = new BehaviorSubject<number>(0);\n  private loadingSubject = new BehaviorSubject<boolean>(false);\n  private errorSubject = new BehaviorSubject<string | null>(null);\n\n  formConfig$: Observable<FormConfig | null> = this.formConfigSubject.asObservable();\n  formData$: Observable<any> = this.formDataSubject.asObservable();\n  currentStepIndex$: Observable<number> = this.currentStepIndexSubject.asObservable();\n  loading$: Observable<boolean> = this.loadingSubject.asObservable();\n  error$: Observable<string | null> = this.errorSubject.asObservable();\n\n  setFormConfig(config: FormConfig): void {\n    this.formConfigSubject.next(config);\n  }\n\n  setFormData(data: any): void {\n    this.formDataSubject.next(data);\n  }\n\n  setCurrentStepIndex(index: number): void {\n    this.currentStepIndexSubject.next(index);\n  }\n\n  setLoading(isLoading: boolean): void {\n    this.loadingSubject.next(isLoading);\n  }\n\n  setError(error: string | null): void {\n    this.errorSubject.next(error);\n  }\n\n  addStep(step: StepConfig): void {\n    const currentConfig = this.formConfigSubject.getValue();\n    if (currentConfig) {\n      currentConfig.steps.push(step);\n      this.formConfigSubject.next(currentConfig);\n    }\n  }\n\n  removeStep(stepId: string): void {\n    const currentConfig = this.formConfigSubject.getValue();\n    if (currentConfig) {\n      currentConfig.steps = currentConfig.steps.filter(step => step.id !== stepId);\n      this.formConfigSubject.next(currentConfig);\n    }\n  }\n\n  saveProgress(): void {\n    if (this.formConfigSubject.getValue()?.persistProgress) {\n      localStorage.setItem('formProgress', JSON.stringify(this.formDataSubject.getValue()));\n    }\n  }\n\n  loadProgress(): void {\n    const savedProgress = localStorage.getItem('formProgress');\n    if (savedProgress) {\n      this.formDataSubject.next(JSON.parse(savedProgress));\n    }\n  }\n\n  clearProgress(): void {\n    localStorage.removeItem('formProgress');\n  }\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { StepFormComponent } from './components/step-form/step-form.component';\nimport { ApiService } from './services/api.service';\nimport { FormStateService } from './services/form-state.service';\n\n@NgModule({\n  declarations: [StepFormComponent],\n  imports: [CommonModule, ReactiveFormsModule, BrowserAnimationsModule],\n  exports: [StepFormComponent],\n  providers: [ApiService, FormStateService]\n})\nexport class StepFormKitModule { }","export const environment = {\n  production: false,\n  formType: 'basic' // Change this to 'advanced' or 'security' to use different form configurations\n};","import { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\nimport { enableProdMode } from '@angular/core';\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error('An error occurred during bootstrap:', err));"],"names":[],"sourceRoot":"webpack:///","x_google_ignoreList":[]}